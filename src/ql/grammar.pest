WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ "\n" | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_" | "-")* }

string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
number = @{ "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT+)? }
boolean = @{ "true" | "false" }
null = @{ "null" }

path_segment = { identifier | "[" ~ number ~ "]" }
path = { identifier ~ ("." ~ path_segment)* }

// Special keyword 'their' for referencing the current entity
their_path = { "their" ~ ("." ~ path_segment)* }

literal = { string | number | boolean | null }
function_call = { identifier ~ "(" ~ (primary_expression ~ ("," ~ primary_expression)*)? ~ ")" }

// Base expressions without filtering
primary_expression = { function_call | literal | their_path | path  }

// Comparison operators
comparison_op = { "==" | "!=" | "<" | "<=" | ">" | ">=" }

// Simple condition
condition = { primary_expression ~ comparison_op ~ primary_expression }

// Logical operators
logical_op = { "&&" | "||" }

// Complete conditional expression (with AND/OR)
where_expression = { condition ~ (logical_op ~ condition)* }

// Where clause
where_clause = { "where" ~ where_expression }

// Expression with optional where clause
expression = { primary_expression ~ where_clause? }

assignment = { path ~ "=" ~ expression }
delete_op = { "delete" ~ path }
operation = { (assignment | delete_op) ~ ";" }

return_stmt = { "return" ~ expression }
query = { "{" ~ operation* ~ return_stmt? ~ "}" }

main = _{ SOI ~ query ~ EOI }